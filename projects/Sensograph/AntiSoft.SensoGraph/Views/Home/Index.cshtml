@using AntiSoft.SensoGraph.Domain.Entities
@model AntiSoft.SensoGraph.Models.Home.IndexModel
@{
    Layout = "_Layout";
}

@section Head
{
    <style>
        canvas {
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
        }
        .minmax {
            text-align: center;
            font-style: italic;
            font-size: 80%;
        }
    </style>
}

<form id="chart-form" class="form-inline justify-content-center" method="get">
    <div class="form-group">
        <label asp-for="Start"></label>
        <input asp-for="Start" class="form-control mx-sm-3" />
        <span asp-validation-for="Start" class="text-danger"></span>
        <label asp-for="End"></label>
        <input asp-for="End" class="form-control mx-sm-3" />
        <span asp-validation-for="End" class="text-danger"></span>
        <label asp-for="Step"></label>
        <select asp-for="Step" asp-items="Html.GetEnumSelectList<ChartStep>()" class="form-control mx-sm-3"></select>
        <span asp-validation-for="Step" class="text-danger"></span>
    </div>
</form>

<hr />
<div id="charts" class="row justify-content-center">
</div>

@section Scripts
{
    <script>
    const chartLineColor = 'rgb(36, 84, 226)';
    const midnightLineColor = 'rgb(255, 170, 0)';

    // Plugin to draw vertical lines.
    // Source: https://stackoverflow.com/questions/30256695/chart-js-drawing-an-arbitrary-vertical-line
    const verticalLinePlugin = {
        getLinePosition: function (chart, pointIndex) {
            const meta = chart.getDatasetMeta(0); // First dataset is used to discover X coordinate of a point.
            const data = meta.data;
            return data[pointIndex]._model.x;
        },
        renderVerticalLine: function (chart, pointIndex) {
            const lineLeftOffset = this.getLinePosition(chart, pointIndex);
            const scale = chart.scales['y-axis-0'];
            const context = chart.chart.ctx;

            // Render vertical line.
            context.beginPath();
            context.strokeStyle = midnightLineColor;
            context.moveTo(lineLeftOffset, scale.top);
            context.lineTo(lineLeftOffset, scale.bottom);
            context.stroke();

            // Write label.
            context.fillStyle = midnightLineColor;
            context.textAlign = 'center';
            const date = new Date(chart.controller.data.labels[pointIndex]);
            if (date) {
                context.fillText('       ' + date.getDate(), lineLeftOffset, (scale.bottom - scale.top) / 2 + scale.top);
            }
        },
        afterDatasetsDraw: function (chart, easing) {
            const self = this;
            if (chart.config.lineAtIndex) {
                chart.config.lineAtIndex.forEach(function (pointIndex) {
                    self.renderVerticalLine(chart, pointIndex)
                });
            }
        }
    };

    function addChart (chartData) {
        const dateFormat = 'd MMM h:mm';
        const canvasEl = $('<canvas></canvas>')[0];

        const midnightLinesIndexes = [];
        chartData.dates.map(function (item, i, arr) {
            const previousDay = i > 0 ? new Date(item).getDay() : null;
            if (previousDay != null && previousDay != new Date(arr[i - 1]).getDay()) {
                midnightLinesIndexes.push(i);
            }
        });
        new Chart(canvasEl.getContext('2d'), {
            type: 'line',
            lineAtIndex: midnightLinesIndexes,
            plugins: [verticalLinePlugin],
            data: {
                labels: chartData.dates,
                datasets: [{
                    label: chartData.label,
                    data: chartData.values,
                    backgroundColor: chartLineColor,
                    borderColor: chartLineColor,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: chartData.label
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        type: 'time',
                        time: {
                            displayFormats: {
                                millisecond: dateFormat,
                                second: dateFormat,
                                minute: dateFormat,
                                hour: dateFormat,
                                day: dateFormat,
                                week: dateFormat,
                                month: dateFormat,
                                quarter: dateFormat,
                                year: dateFormat
                            }
                        },
                        scaleLabel: {
                            display: true
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: chartData.yLabel
                        }
                    }]
                },
                legend: {
                    display: false
                }
            }
        });
        return canvasEl;
    }

    $(function () {
        // Auto-submit form.
        $('#chart-form input, #chart-form select').change(function () {
            $('#chart-form').submit();
        });

        // Render charts.
        const jsonData = @Json.Serialize(Model.Charts);
        jsonData.forEach(function (chartData) {
            const chartEl = addChart(chartData);
            $('#charts').append(chartEl);
            const minMaxEl = $('<div class="minmax" />')
                .append('<span>Min: ' + chartData.minimumValueForPeriod + '</span>')
                .append('&nbsp;&nbsp;')
                .append('<span>Max: ' + chartData.maximumValueForPeriod + '</span>');
            $('#charts').append(minMaxEl);
        });
    });
    </script>
}
